import asyncio
from typing import List
from fastapi import FastAPI, HTTPException
from orders_service.logger import get_logger
from orders_service.presentation.routes import router
from orders_service.infrastructure.models import Base
from orders_service.infrastructure.db import engine
from orders_service.infrastructure.messaging import (
    start_outbox_publisher,
    start_payment_result_consumer,
)
from sqlalchemy.exc import SQLAlchemyError


logger = get_logger(__name__, filename="main.log")

app = FastAPI(title="Order Service")
app.include_router(router)
_tasks: List[asyncio.Task] = []


@app.on_event("startup")
async def on_startup():
    # –°–æ–∑–¥–∞—ë–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    logger.info("Starting up Order Service‚Ä¶")
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
        logger.info("‚úÖ Database tables created/verified")

    t1 = asyncio.create_task(start_outbox_publisher(), name="outbox_publisher")
    t2 = asyncio.create_task(start_payment_result_consumer(), name="payment_result_consumer")
    _tasks.extend([t1, t2])
    logger.info("‚úÖ Background tasks started: outbox_publisher, payment_result_consumer")


@app.on_event("shutdown")
async def on_shutdown():
    logger.info("üî¥ Shutting down background tasks‚Ä¶")
    for t in _tasks:
        t.cancel()
    # –¥–æ–∂–¥—ë–º—Å—è, —á—Ç–æ–±—ã –≤—Å–µ –æ–Ω–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await asyncio.gather(*_tasks, return_exceptions=True)
    logger.info("üî¥ All background tasks stopped")

@app.get("/health", tags=["Health"])
async def health_check():
    """
    –ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
    - API –æ—Ç–≤–µ—á–∞–µ—Ç
    - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞
    """
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π (asyncpg)
    try:
        async with engine.begin() as conn:
            # –≤—ã–ø–æ–ª–Ω–∏—Ç –ø—Ä–æ—Å—Ç–æ–π SQL ‚Äî –µ—Å–ª–∏ DB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —É–ø–∞–¥—ë—Ç
            await conn.execute("SELECT 1")
    except SQLAlchemyError as e:
        # –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è ‚Äî –≤–µ—Ä–Ω—ë–º 503
        raise HTTPException(status_code=503, detail="DB connection failed")

    return {"status": "ok"}